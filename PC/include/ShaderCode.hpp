/*Automatisch generiert*/
#pragma once
#include <string>

namespace ShaderCode {
static const std::string MandelbrotVertex = "#version 330 core\n\nlayout(location = 0) in vec2 position;\n\nvoid main() {\n    gl_Position = vec4(position, 0, 1);\n}\n\n\n";
static const std::string MandelbrotFragment = "#version 330 core\n\nprecision highp float;\n\nout vec4 color;\nconst float maxSteps = 250;\nconst float threshold = 2.5;\nconst float oneThird = 1.0 / 3.0;\nconst float twoThird = 2.0 / 3.0;\n\nuniform vec4 centerWidthHeight;\nuniform vec2 windowSize;\nuniform int colorMap;\n\nvec2 sqareImag(vec2 v) {\n    return vec2(\n        v.x * v.x - v.y * v.y,\n        2 * v.x * v.y\n    );\n}\n\nfloat iterate(vec2 coord) {\n    vec2 temp = vec2(0.0, 0.0);\n\n    for (int i = 0; i < maxSteps; i++) {\n        temp = sqareImag(temp) + coord;\n        if (length(temp) > threshold) return i/maxSteps;\n    }\n\n    return maxSteps;\n}\n\nvec4 getColorMap(float grayColor) {\n    bool invert = colorMap / 100 != 0;\n    int firstColor = (colorMap % 100) / 10;\n    int secondColor = colorMap % 10;\n\n    if (invert) grayColor = 1.0 - grayColor;\n\n    float normal = grayColor;\n    float mid = max((grayColor - oneThird) * 1.5, 0);\n    float high = max((grayColor - twoThird) * 3, 0);\n\n    float r, g, b;\n\n    if (firstColor == 0) {\n        r = normal;\n        g = normal;\n        b = normal;\n    } else if (firstColor == 1) {\n        r = normal;\n        if (secondColor == 2) {\n            g = mid;\n            b = high;\n        } else if (secondColor == 3) {\n            g = high;\n            b = mid;\n        } else {\n            g = 0;\n            b = 0;\n        }\n    } else if (firstColor == 2) {\n        g = normal;\n        if (secondColor == 1) {\n            r = mid;\n            b = high;\n        } else if (secondColor == 3) {\n            r = high;\n            b = mid;\n        } else {\n            r = 0;\n            b = 0;\n        }\n    } else if (firstColor == 3) {\n        b = normal;\n        if (secondColor == 1) {\n            r = mid;\n            g = high;\n        } else if (secondColor == 2) {\n            r = high;\n            g = mid;\n        } else {\n            r = 0;\n            g = 0;\n        }\n    }\n\n    return vec4(r, g, b, 1);\n\n    //return vec4(grayColor, grayColor, grayColor, 1); //Tempor√§r\n}\n\nvoid main() {\n    vec2 size = centerWidthHeight.zw;\n    vec2 center = centerWidthHeight.xy;\n    vec2 offset = ((gl_FragCoord.xy / windowSize) - vec2(0.5, 0.5)) * 2;\n    vec2 coord = center + (offset * size);\n\n    /*float lerpValue = gl_FragCoord.y / 500.0f;\n    color = mix(vec4(1.0f, 1.0f, 1.0f, 1.0f), vec4(0.2f, 0.2f, 0.2f, 0.0f), lerpValue);\n\n    color = vec4(coord, 0, 1);\n    if (color.x < 0.0 && color.y < 0.0) color.z = 1.0f;*/\n\n    float grayColor = clamp(iterate(coord), 0, 1);\n\n    color = getColorMap(grayColor);\n\n    //color = vec4(0.5, 0.5, 0.0, 1.0);\n};\n";
static const std::string OverlayVertex = "#version 330 core\n\nlayout(location = 0) in vec2 position;\nlayout(location = 1) in vec2 vertexCoords;\n\nout vec2 uv;\n\nvoid main(){\n    gl_Position = vec4(position, 0, 1);\n    uv = vertexCoords;\n}\n\n\n";
static const std::string OverlayFragment = "#version 330 core\n\nin vec2 uv;\n\nout vec4 color;\n\nuniform sampler2D textureSampler;\n\nvoid main(){\n    //color = vec3(0.5, 1.0, 0.25);\n    color = texture(textureSampler, uv);\n}\n";
}
